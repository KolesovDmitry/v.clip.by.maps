#!/usr/bin/env python
# -*- coding: utf-8  -*-
#
############################################################################
#
# MODULE:      v.clip.by.maps
# AUTHOR(S):   Dmitry Kolesov (kolesov.dm@gmail.com);
#
# PURPOSE:     Cut from the input area parts that are "neighbours" of the
#              centroids of the user defined maps.
#
# COPYRIGHT:   (C) 2014 Dmitry Kolesov / NextGIS company
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################

#%Module
#% description: Cut from the input area parts that are "neighbours" of the centroids of the user defined maps
#%End
#%option
#% key: input
#% type: string
#% description: name of the input vector map
#% required : yes
#% multiple: no
#%end
#%option
#% key: prefix
#% type: string
#% description: prefix of the names of the maps used as cutters
#% required : yes
#% multiple: no
#%end
#%option
#% key: output
#% type: string
#% description: name of the output vector map
#% required : yes
#% multiple: no
#%end


import os, sys

if "GISBASE" not in os.environ:
    print "You must be in GRASS GIS to run this program."
    sys.exit(1)

import grass.script as grass


def main(options, flags):
    in_map = options['input']
    prefix = options['prefix']
    out_map = options['output']

    names = []
    p = grass.pipe_command('g.mlist', type='vect', pattern=prefix+'*')
    for line in p.stdout:
        line = line.strip()
        if line == in_map:
            continue
        names.append(line)

    # Centroid of the first area
    p = grass.pipe_command('v.out.ascii', input=in_map, fs=' ')
    c = p.stdout.readline()
    p.wait()
    x1, y1 = [float(t) for t in c.split()[:2]]

    # Cut the area
    tmp_clipped_map = 'area_tmp_%d' % os.getpid()
    tmp_overlay_map = 'over_tmp_%d' % os.getpid()
    grass.run_command('g.copy', vect='%s,%s' % (in_map,out_map), overwrite=True, quiet=True)
    try:
        for map in names:
            grass.run_command(
                './v.cliparea',
                input=map, cutter=out_map, output=tmp_clipped_map
            )
            grass.run_command('v.overlay',
                ainput=out_map, binput=tmp_clipped_map, output=tmp_overlay_map, operator='not',
                flags='t',
                overwrite=True, quiet=True
            )

            # Move centroid to the old place
            # (new area has centroid in a different place, restore the previouse centroid position)
            p = grass.pipe_command('v.out.ascii', input=tmp_overlay_map, fs=' ')
            c = p.stdout.readline()
            p.wait()

            x_new, y_new, cat = c.split()
            x_new, y_new = float(x_new), float(y_new)
            dx, dy = x1 - x_new, y1 - y_new
            grass.run_command('v.edit',
                map=tmp_overlay_map, tool='move', move='%s,%s' % (dx,dy), type='centroid', cat=cat,
                quiet=True
            )

            # Replace out_map by the cplipped map
            grass.run_command('g.copy', vect='%s,%s' % (tmp_overlay_map, out_map), overwrite=True, quiet=True)
    finally:
        grass.run_command('g.remove', vect=tmp_clipped_map, quiet=True)
        grass.run_command('g.remove', vect=tmp_overlay_map, quiet=True)

    # Copy attribute table
    p = grass.pipe_command('v.category', input=in_map, option='print')
    cat = p.stdout.readline().strip()
    p.wait()
    grass.run_command('./v.copyattr', input=in_map, output=out_map, cat=cat)


if __name__ == "__main__":
    options, flags = grass.parser()
    main(options, flags)
    sys.exit(0)

